#Использовать fs
#Использовать "../../core"
// #Использовать gitrules

///////////////////////////////////////////////////////////////////////////////
//
// Служебный модуль с реализацией работы команды
//
///////////////////////////////////////////////////////////////////////////////

Процедура ОписаниеКоманды(Команда) Экспорт

	Команда.Аргумент("PATH", "" ,"Путь к каталогу с правилами обмена")
		.ТСтрока();

	Команда.Опция("idx index", ,"Индексировать изменения")
		.ТБулево()
		.Флаговый()
		.ПоУмолчанию(Ложь);
		
	
КонецПроцедуры

Процедура ВыполнитьКоманду(Знач Команда) Экспорт

	КаталогPATH = Команда.ЗначениеАргумента("PATH");
	ИндексироватьИзменения = Команда.ЗначениеОпции("index");

	Если ПустаяСтрока(КаталогPATH) Тогда
		КаталогPATH = ТекущийСценарий().Каталог;
	КонецЕсли;
	КаталогИзПараметров = ОбщийФункционал.ПолучитьПолныйПутьККаталогу(КаталогPATH);
	Файл = Новый Файл(КаталогИзПараметров);
	Если Не Файл.Существует() Или Не Файл.ЭтоКаталог() Тогда

		СтрокаОшибки = СтрШаблон("Каталог с правилами обмена <%1> не существует", КаталогИзПараметров);
		ВызватьИсключение СтрокаОшибки;

	КонецЕсли;

	//Проверим на GIT репозиторий
	Если Не ОбщийФункционал.ЭтоGitРепозиторий(КаталогИзПараметров) Тогда
		СообщениеОшибки = СтрШаблон("Каталог <%1> не является репозиторием GIT", КаталогИзПараметров);
		ВызватьИсключение Новый ИнформацияОбОшибке(СообщениеОшибки, "Завершение работы");
	КонецЕсли;

	КаталогSRC = ОбъединитьПути(КаталогИзПараметров, "src");

	МенеджерПравил = Новый ОбработкаПравил();
	МенеджерПравил.ИнициализироватьКаталогИсходников(КаталогSRC);
	МенеджерПравил.ЗапуститьВыгрузкуПравилВФайлы(КаталогИзПараметров, КаталогSRC, ИндексироватьИзменения);

КонецПроцедуры