///////////////////////////////////////////////////////////////////////////////
//
// Служебный модуль с реализацией работы команды
//
///////////////////////////////////////////////////////////////////////////////

Процедура НастроитьКоманду(Знач Команда, Знач Парсер) Экспорт

КонецПроцедуры // НастроитьКоманду

// Выполняет логику команды
// 
// Параметры:
//   ПараметрыКоманды - Соответствие - Соответствие ключей командной строки и их значений
//   Приложение - Модуль - Модуль менеджера приложения
//
Функция ВыполнитьКоманду(Знач ПараметрыКоманды, Знач Приложение) Экспорт
	
	ЕстьОшибки = Ложь;

	КаталогПроекта = Новый Файл(ОбъединитьПути(ТекущийКаталог(), ".git"));
	 Если Не КаталогПроекта.Существует() Тогда
	 	Сообщить("Этот каталог не является репозиторием GIT");
	 	Сообщить("Операция прервана");
		Возврат Приложение.РезультатыКоманд().НеверныеПараметры;
	КонецЕсли;

	МассивИменФайлов = Новый Массив;
	МассивИменФайлов.Добавить("pre-commit");
	МассивИменФайлов.Добавить("v8-exchrules1s.os");

	КаталогHooks = ОбъединитьПути(КаталогПроекта.ПолноеИмя, "hooks");
	Для Каждого ИмяФайла Из МассивИменФайлов Цикл
		Попытка
			УдалитьФайлы(ОбъединитьПути(КаталогHooks, ИмяФайла));
		Исключение
			ЕстьОшибки = Истина;
			Сообщить("При удалении файла " + ИмяФайла + " произошла ошибка. Причина: " + ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	Если ЕстьОшибки Тогда
		Сообщить("Операция прервана");
		Возврат Приложение.РезультатыКоманд().НеверныеПараметры;
	Иначе
		Сообщить("Gitrules успешно удален из репозитория");
	КонецЕсли;
	
	Возврат Приложение.РезультатыКоманд().Успех;
	
КонецФункции // ВыполнитьКоманду
